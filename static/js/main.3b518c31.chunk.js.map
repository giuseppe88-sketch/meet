{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","Component","EventList","events","this","props","className","map","event","id","CitySearch","state","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","setState","handleItemClicked","suggestion","type","onChange","onClick","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6NASeA,E,4JANX,WACI,OACI,4B,GAHQC,aCcLC,E,4JAZX,WACI,IAAQC,EAAWC,KAAKC,MAAhBF,OACR,OACI,oBAAIG,UAAU,YAAd,SACKH,EAAOI,KAAI,SAAAC,GAAK,OACb,6BACI,cAAC,EAAD,CAAOA,MAAOA,KADTA,EAAMC,a,GANXR,aCyCTS,E,4MAzCXC,MAAQ,CACJC,MAAO,GACPC,YAAa,I,EAEfC,mBAAqB,SAACN,GACpB,IAAMO,EAAQP,EAAMQ,OAAOD,MACrBF,EAAc,EAAKR,MAAMY,UAAUC,QAAO,SAACC,GAC7C,OAAOA,EAASC,cAAcC,QAAQN,EAAMK,gBAAkB,KAElE,EAAKE,SAAS,CAAEV,MAAOG,EAAOF,iB,EAEhCU,kBAAoB,SAACC,GACnB,EAAKF,SAAS,CACZV,MAAOY,K,4CAIb,WAAS,IAAD,OACJ,OACI,sBAAKlB,UAAU,aAAf,UACE,uBACEmB,KAAK,OACLnB,UAAU,OACVS,MAAOX,KAAKO,MAAMC,MAClBc,SAAUtB,KAAKU,qBAEnB,qBAAIR,UAAU,cAAd,UACKF,KAAKO,MAAME,YAAYN,KAAI,SAACiB,GAAD,OAC5B,oBAEEG,QAAS,kBAAM,EAAKJ,kBAAkBC,IAFxC,SAGEA,GAFKA,MAIT,6BACM,2D,GAnCKvB,aCcV2B,G,kKAVb,WACE,OACE,sBAAKtB,UAAU,MAAf,UACK,cAAC,EAAD,IACA,cAAC,EAAD,W,GALOL,cCOE4B,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.3b518c31.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Event extends Component{\n    render(){\n        return(\n            <div></div>\n        )\n    }\n}\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n    render(){\n        const { events } = this.props;\n        return(\n            <ul className=\"EventList\">\n                {events.map(event=>\n                    <li key={event.id}>\n                        <Event event={event} />\n                    </li>)}\n           </ul>\n        );\n    }\n}\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n    state = {\n        query: '',\n        suggestions: []\n      }\n      handleInputChanged = (event) => {\n        const value = event.target.value;\n        const suggestions = this.props.locations.filter((location) => {\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n          });\n        this.setState({ query: value, suggestions,});\n      }\n      handleItemClicked = (suggestion) => {\n        this.setState({\n          query: suggestion\n        });\n      }\n\n    render(){\n        return (\n            <div className=\"CitySearch\">\n              <input\n                type=\"text\"\n                className=\"city\"\n                value={this.state.query}\n                onChange={this.handleInputChanged}\n                />\n            <ul className=\"suggestions\">\n                {this.state.suggestions.map((suggestion) => (\n                <li\n                  key={suggestion}\n                  onClick={() => this.handleItemClicked(suggestion)}\n                >{suggestion}</li>\n              ))}\n              <li>\n                    <b>See all cities</b>\n           </li>\n         </ul>\n            </div>\n        )\n    }\n}\nexport default CitySearch;","import React, { Component } from 'react';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n           <CitySearch /> \n           <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}